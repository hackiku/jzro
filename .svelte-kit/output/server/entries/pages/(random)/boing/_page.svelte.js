import { c as create_ssr_component, i as add_attribute, v as validate_component, e as escape } from "../../../../chunks/ssr.js";
const Planet = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return ``;
});
const css = {
  code: ".rocket.svelte-1jnt8wo{position:absolute;top:80vh;left:5vw;transform:translateX(-20%);width:9em !important;z-index:10}.velocity.svelte-1jnt8wo{color:#ff3d00}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<!-- boing -->\\n<!-- routes/boing/+page.svelte -->\\n\\n<script>\\n  import { onMount } from 'svelte';\\n  import { browser } from '$app/environment';\\n  // import { navigate } from 'svelte-routing';\\n  import gsap from 'gsap';\\n  import Planet from '$lib/grav/Planet.svelte';\\n  // import GravityLauncher from '$lib/grav/GravityLauncher.svelte';\\n  // <GravityLauncher />\\n\\n  let MotionPathPlugin;\\n\\n  let velocity = 43;\\n  let trajectoryPath = '';\\n\\n  let hitTarget = false;\\n  let hitMessage = 'Srecan Svetski Trifun i hvala, uvek, na tough love';\\n\\n  function calculateTrajectory(velocity, width, height) {\\n    const startX = width * 0.01;\\n    const startY = height * 1;\\n\\n    const heightModifier = (velocity / 50) * height * 0.8;\\n    const lengthModifier = (velocity / 50) * width * 1.6;\\n\\n    const peakHeight = startY - heightModifier;\\n    const totalLength = startX + lengthModifier;\\n\\n    return \`M\${startX},\${startY} C\${startX + totalLength / 4},\${peakHeight} \${startX + 3 * totalLength / 4},\${peakHeight} \${totalLength},\${startY}\`;\\n  }\\n\\n\\nif (browser) {\\n\\n  onMount(async () => {\\n    if (typeof window !== 'undefined') {\\n      MotionPathPlugin = (await import('gsap/MotionPathPlugin')).MotionPathPlugin;\\n      gsap.registerPlugin(MotionPathPlugin);\\n\\n      const width = window.innerWidth;\\n      const height = window.innerHeight;\\n      trajectoryPath = calculateTrajectory(velocity, width, height);\\n\\n      window.addEventListener('resize', () => {\\n        trajectoryPath = calculateTrajectory(velocity, window.innerWidth, window.innerHeight);\\n      });\\n    }\\n  });\\n};\\n\\n  function launchRocket() {\\n  // Create a copy of the rocket\\n  const rocketCopy = document.createElement('img');\\n  rocketCopy.src = 'game/bananica.png';\\n  rocketCopy.classList.add('rocket');\\n  rocketCopy.style.position = 'absolute';\\n  rocketCopy.style.width = '9em';\\n  rocketCopy.style.top = '80vh'; // Adjust based on the original rocket's position\\n  rocketCopy.style.left = '5vw'; // Adjust based on the original rocket's position\\n  document.body.appendChild(rocketCopy);\\n\\n  gsap.to(rocketCopy, {\\n    duration: 80 / velocity,\\n    ease: \\"power1.inOut\\",\\n    motionPath: {\\n      path: trajectoryPath, // Use the dynamic path\\n      align: \\"self\\",\\n      // autoRotate: true,\\n      alignOrigin: [0, 0],\\n    },\\n    \\n    onUpdate: () => {\\n      // Check for collision during the animation\\n      const rocketRect = rocketCopy.getBoundingClientRect();\\n      const targetRect = document.querySelector('svg circle').getBoundingClientRect();\\n\\n      // Simple overlap check\\n      if (rocketRect.right > targetRect.left && rocketRect.left < targetRect.right &&\\n          rocketRect.bottom > targetRect.top && rocketRect.top < targetRect.bottom) {\\n        hitTarget = true;\\n        gsap.killTweensOf(rocketCopy); // Stop the animation\\n        rocketCopy.remove(); // Remove the rocket\\n      }\\n    },\\n    onComplete: () => {\\n      if (!hitTarget) { // If target was not hit\\n        rocketCopy.remove();\\n      }\\n    },\\n  });\\n}\\n\\n  // make sure client-side execution only\\n  $: if (browser && velocity) {\\n    trajectoryPath = calculateTrajectory(velocity, window.innerWidth, window.innerHeight);\\n  }\\n<\/script>\\n\\n\\n<!-- ========================================= -->\\n\\n\\n\\n<section class=\\"flex-col items-center justify-start h-screen\\">\\n  \\n  <div class=\\"relative w-full h-full\\">\\n    <!-- Rocket positioned at a fixed point -->\\n    <img src=\\"game/bananica.png\\" alt=\\"rocket\\" class=\\"rocket\\" />\\n    \\n    <!-- Corrected Trajectory SVG, now with the correct stroke color -->\\n    <svg class=\\"absolute\\" width=\\"100vw\\" height=\\"100vh\\" style=\\"position: absolute; bottom: 20vh; left: 5vw;\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n      <path d={trajectoryPath} fill=\\"none\\" stroke=\\"#ff3d00\\" stroke-width=\\"0.5\\" stroke-dasharray=\\"10,10\\"/>\\n    </svg>\\n  </div>\\n      \\n  <div>\\n\\n    <!-- Target area -->\\n    <div class=\\"absolute\\" style=\\"right: 10vw; top: 10vh;\\" width=\\"100\\" height=\\"100\\">\\n      <Planet id=\\"work\\" color=\\"#F4191D\\" label=\\"Jao Bre\\" />\\n    </div> \\n    <!-- <svg class=\\"absolute\\" style=\\"right: 10vw; top: 10vh;\\" width=\\"100\\" height=\\"100\\"> -->\\n      <!-- <circle cx=\\"50\\" cy=\\"50\\" r=\\"40\\" stroke=\\"black\\" stroke-width=\\"3\\" fill=\\"red\\" /> -->\\n      <!-- <text x=\\"50\\" y=\\"55\\" font-family=\\"Times\\" font-size=\\"1.6em\\" fill=\\"white\\" text-anchor=\\"middle\\" dominant-baseline=\\"central\\">jao bre</text> -->\\n    <!-- </svg> -->\\n  </div>\\n\\n  <!-- Velocity slider -->\\n\\n  <div class=\\"z-50 fixed p-6 bottom-6 rounded-full backdrop-blur-md flex justify-center items-center bg-gray-500 bg-opacity-10 left-1/2 transform -translate-x-1/2\\">\\n    <button class=\\"text-5xl mr-6 hover:bg-red-500 rounded-full\\" on:click={launchRocket}>ðŸ’¥</button>\\n    <div class=\\"relative space-between-12 flex flex-col justify-center group hover:opacity-100 transition-opacity\\">\\n        <p>v = <span class=\\"velocity\\">{velocity}</span> m/s</p>\\n      <input type=\\"range\\" min=\\"1\\" max=\\"100\\" value={velocity} class=\\"slider w-full\\" id=\\"particleNumber\\" on:input={(e) => velocity = e.target.value} />\\n    </div>\\n  </div>\\n\\n  <img src=\\"assets/footer.svg\\" alt=\\"\\" class=\\"fixed inset-x-0 bottom-0 w-full z-0 mb-0\\">\\n\\n\\n  <!-- victory message -->\\n  \\n  {#if hitTarget}\\n  <div class=\\"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-transparent p-4 rounded-2xl shadow-lg border-2\\" style=\\"border-color: #F4191D;\\">\\n    <div class=\\"flex flex-col text-center mb-4\\">\\n      <p class=\\"text-center text-white text-xl mb-6\\">{hitMessage}</p>\\n      <p class=\\"text-4xl text center\\">ðŸ«€ðŸ“š</p>\\n      <a href=\\"javascript:void(0);\\" onclick=\\"window.location.reload();\\" class=\\"text-[#F4191D] hover:text-red-700 mt-4 inline-block cursor-pointer\\" on:click={restartGame}>Restart â†’</a>\\n      </div>\\n  </div>\\n  {/if}\\n\\n\\n</section>\\n\\n\\n<style>\\n  .rocket {\\n    position: absolute;\\n    top: 80vh; \\n    left: 5vw;\\n    transform: translateX(-20%);\\n    width: 9em !important;\\n    z-index: 10;\\n  }\\n  .original {\\n    /* Additional styles for the original rocket, if needed */\\n  }\\n  .velocity {\\n    color: #ff3d00;\\n  }\\n</style>\\n"],"names":[],"mappings":"AA+JE,sBAAQ,CACN,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,WAAW,IAAI,CAAC,CAC3B,KAAK,CAAE,GAAG,CAAC,UAAU,CACrB,OAAO,CAAE,EACX,CAIA,wBAAU,CACR,KAAK,CAAE,OACT"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let velocity = 43;
  let trajectoryPath = "";
  $$result.css.add(css);
  return `    <section class="flex-col items-center justify-start h-screen"><div class="relative w-full h-full"> <img src="game/bananica.png" alt="rocket" class="rocket svelte-1jnt8wo">  <svg class="absolute" width="100vw" height="100vh" style="position: absolute; bottom: 20vh; left: 5vw;" fill="none" xmlns="http://www.w3.org/2000/svg"><path${add_attribute("d", trajectoryPath, 0)} fill="none" stroke="#ff3d00" stroke-width="0.5" stroke-dasharray="10,10"></path></svg></div> <div> <div class="absolute" style="right: 10vw; top: 10vh;" width="100" height="100">${validate_component(Planet, "Planet").$$render(
    $$result,
    {
      id: "work",
      color: "#F4191D",
      label: "Jao Bre"
    },
    {},
    {}
  )}</div>    </div>  <div class="z-50 fixed p-6 bottom-6 rounded-full backdrop-blur-md flex justify-center items-center bg-gray-500 bg-opacity-10 left-1/2 transform -translate-x-1/2"><button class="text-5xl mr-6 hover:bg-red-500 rounded-full" data-svelte-h="svelte-156r4tt">ðŸ’¥</button> <div class="relative space-between-12 flex flex-col justify-center group hover:opacity-100 transition-opacity"><p>v = <span class="velocity svelte-1jnt8wo">${escape(velocity)}</span> m/s</p> <input type="range" min="1" max="100"${add_attribute("value", velocity, 0)} class="slider w-full" id="particleNumber"></div></div> <img src="assets/footer.svg" alt="" class="fixed inset-x-0 bottom-0 w-full z-0 mb-0">  ${``} </section>`;
});
export {
  Page as default
};
